{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":11633,"byte_end":11666,"line_start":388,"line_end":388,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, be_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:388:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m388\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":11779,"byte_end":11814,"line_start":394,"line_end":394,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:394:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m394\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":12003,"byte_end":12097,"line_start":401,"line_end":401,"column_start":3,"column_end":97,"is_primary":false,"text":[{"text":"  map!(i, be_u24, | x | if x & 0x80_00_00 != 0 { (x | 0xff_00_00_00) as i32 } else { x as i32 })","highlight_start":3,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:401:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m401\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u24, | x | if x & 0x80_00_00 != 0 { (x | 0xff_00_00_00) as i32 } else { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":12210,"byte_end":12245,"line_start":407,"line_end":407,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:407:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":12358,"byte_end":12393,"line_start":413,"line_end":413,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:413:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":13977,"byte_end":14010,"line_start":474,"line_end":474,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, le_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:474:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":14126,"byte_end":14161,"line_start":480,"line_end":480,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:480:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m480\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":14353,"byte_end":14447,"line_start":487,"line_end":487,"column_start":3,"column_end":97,"is_primary":false,"text":[{"text":"  map!(i, le_u24, | x | if x & 0x80_00_00 != 0 { (x | 0xff_00_00_00) as i32 } else { x as i32 })","highlight_start":3,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:487:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u24, | x | if x & 0x80_00_00 != 0 { (x | 0xff_00_00_00) as i32 } else { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":14563,"byte_end":14598,"line_start":493,"line_end":493,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:493:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":17515,"byte_end":17516,"line_start":516,"line_end":516,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":14714,"byte_end":14749,"line_start":499,"line_end":499,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":16634,"byte_end":17524,"line_start":497,"line_end":518,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":65},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      pub fn _unify<T, R, F: FnOnce(T) -> R>(f: F, t: T) -> R {","highlight_start":1,"highlight_end":64},{"text":"       f(t)","highlight_start":1,"highlight_end":12},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, _unify($g, o))","highlight_start":1,"highlight_end":104},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), $g);","highlight_start":1,"highlight_end":46},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), $g);","highlight_start":1,"highlight_end":36},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:516:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), $g);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:499:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9418,"byte_end":9419,"line_start":287,"line_end":287,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19190,"byte_end":19602,"line_start":645,"line_end":662,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:287:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:645:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9382,"byte_end":9418,"line_start":287,"line_end":287,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19190,"byte_end":19602,"line_start":645,"line_end":662,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:645:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1459,"byte_end":1482,"line_start":54,"line_end":54,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19190,"byte_end":19602,"line_start":645,"line_end":662,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:645:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19190,"byte_end":19602,"line_start":645,"line_end":662,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:645:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14645,"byte_end":14668,"line_start":438,"line_end":438,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26731,"byte_end":26754,"line_start":776,"line_end":776,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19190,"byte_end":19602,"line_start":645,"line_end":662,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14527,"byte_end":15032,"line_start":434,"line_end":450,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:645:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9418,"byte_end":9419,"line_start":287,"line_end":287,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19750,"byte_end":20162,"line_start":668,"line_end":685,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:287:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:668:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9382,"byte_end":9418,"line_start":287,"line_end":287,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19750,"byte_end":20162,"line_start":668,"line_end":685,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:668:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1459,"byte_end":1482,"line_start":54,"line_end":54,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19750,"byte_end":20162,"line_start":668,"line_end":685,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:668:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19750,"byte_end":20162,"line_start":668,"line_end":685,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:668:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14645,"byte_end":14668,"line_start":438,"line_end":438,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26731,"byte_end":26754,"line_start":776,"line_end":776,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":19750,"byte_end":20162,"line_start":668,"line_end":685,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14527,"byte_end":15032,"line_start":434,"line_end":450,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:668:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9418,"byte_end":9419,"line_start":287,"line_end":287,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20316,"byte_end":20728,"line_start":691,"line_end":708,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:287:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:691:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9382,"byte_end":9418,"line_start":287,"line_end":287,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20316,"byte_end":20728,"line_start":691,"line_end":708,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:691:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1459,"byte_end":1482,"line_start":54,"line_end":54,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20316,"byte_end":20728,"line_start":691,"line_end":708,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:691:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20316,"byte_end":20728,"line_start":691,"line_end":708,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:691:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14645,"byte_end":14668,"line_start":438,"line_end":438,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26731,"byte_end":26754,"line_start":776,"line_end":776,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20316,"byte_end":20728,"line_start":691,"line_end":708,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14527,"byte_end":15032,"line_start":434,"line_end":450,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:691:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9418,"byte_end":9419,"line_start":287,"line_end":287,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20877,"byte_end":21289,"line_start":714,"line_end":731,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:287:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:714:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9382,"byte_end":9418,"line_start":287,"line_end":287,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20877,"byte_end":21289,"line_start":714,"line_end":731,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:714:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":27166,"byte_end":27167,"line_start":787,"line_end":787,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1459,"byte_end":1482,"line_start":54,"line_end":54,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20877,"byte_end":21289,"line_start":714,"line_end":731,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs:787:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:714:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":9010,"byte_end":9071,"line_start":276,"line_end":276,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6764,"byte_end":6788,"line_start":191,"line_end":191,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6966,"byte_end":6992,"line_start":196,"line_end":196,"column_start":21,"column_end":47,"is_primary":false,"text":[{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":21,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":8323,"byte_end":8357,"line_start":243,"line_end":243,"column_start":7,"column_end":41,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":7,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2474,"byte_end":2497,"line_start":78,"line_end":78,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20877,"byte_end":21289,"line_start":714,"line_end":731,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/branch.rs","byte_start":6193,"byte_end":8371,"line_start":170,"line_end":246,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)* ) => (","highlight_start":1,"highlight_end":71},{"text":"    compiler_error!(\"alt uses '|' as separator, not ',':","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"      alt!(","highlight_start":1,"highlight_end":12},{"text":"        tag!(\\\"abcd\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"efgh\\\") |","highlight_start":1,"highlight_end":25},{"text":"        tag!(\\\"ijkl\\\")","highlight_start":1,"highlight_end":23},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    \");","highlight_start":1,"highlight_end":8},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident, $($rest:tt)* ) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) , $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      let res = $subrule!(i_, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $subrule!(i_, $($args)* ) {","highlight_start":1,"highlight_end":40},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(e)      => {","highlight_start":1,"highlight_end":44},{"text":"          let out = alt!(__impl $i, $($rest)*);","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          // Compile-time hack to ensure that res's E type is not under-specified.","highlight_start":1,"highlight_end":83},{"text":"          // This all has no effect at runtime.","highlight_start":1,"highlight_end":48},{"text":"          fn unify_types<T>(_: &T, _: &T) {}","highlight_start":1,"highlight_end":45},{"text":"          if let $crate::IResult::Error(ref e2) = out {","highlight_start":1,"highlight_end":56},{"text":"            unify_types(&e, e2);","highlight_start":1,"highlight_end":33},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"          out","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, __end) => (","highlight_start":1,"highlight_end":31},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)* | __end)","highlight_start":1,"highlight_end":41},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":8905,"byte_end":9427,"line_start":273,"line_end":289,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:714:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3482,"byte_end":3483,"line_start":100,"line_end":100,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14645,"byte_end":14668,"line_start":438,"line_end":438,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26731,"byte_end":26754,"line_start":776,"line_end":776,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":4419,"byte_end":4442,"line_start":125,"line_end":125,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":3157,"byte_end":3331,"line_start":92,"line_end":94,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":2142,"byte_end":2302,"line_start":68,"line_end":70,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i_,","highlight_start":11,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1022,"byte_end":1062,"line_start":39,"line_end":39,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37526,"byte_end":37549,"line_start":1138,"line_end":1138,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!(i_, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6954,"byte_end":6977,"line_start":198,"line_end":198,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs","byte_start":20877,"byte_end":21289,"line_start":714,"line_end":731,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/verbose_errors.rs","byte_start":6830,"byte_end":8463,"line_start":195,"line_end":227,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":37356,"byte_end":37927,"line_start":1132,"line_end":1151,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = (&$i).offset(&i);","highlight_start":1,"highlight_end":40},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":26619,"byte_end":27175,"line_start":772,"line_end":789,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        _                              => {","highlight_start":1,"highlight_end":44},{"text":"          let res: $crate::IResult<_,_> = $crate::IResult::Done($i, ::std::option::Option::None);","highlight_start":1,"highlight_end":98},{"text":"          res","highlight_start":1,"highlight_end":14},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/macros.rs","byte_start":14527,"byte_end":15032,"line_start":434,"line_end":450,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":958,"byte_end":1076,"line_start":36,"line_end":42,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs","byte_start":1150,"byte_end":5267,"line_start":47,"line_end":148,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          let i_ = i.clone();","highlight_start":1,"highlight_end":30},{"text":"          tuple_parser!(i_,","highlight_start":1,"highlight_end":28},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let i_ = $i.clone();","highlight_start":1,"highlight_end":27},{"text":"      match $submac!(i_, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/sequence.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/veri/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-3.2.1/src/nom.rs:714:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
